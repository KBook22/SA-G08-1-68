import React, { useState, useEffect } from 'react';
import { Select, Button, Modal, Form, Input, message } from 'antd';
import { PlusOutlined } from '@ant-design/icons';

const { Option } = Select;

interface Skill {
  id: number;
  name: string;
}

interface SkillSelectProps {
  value?: string[];
  onChange?: (skills: string[]) => void;
  placeholder?: string;
}

const SkillSelect: React.FC<SkillSelectProps> = ({
  value = [],
  onChange,
  placeholder = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞..."
}) => {
  const [skills, setSkills] = useState<Skill[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Skills (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° error handling)
  const fetchSkills = async (search?: string) => {
    try {
      setLoading(true);
      const params = search ? `?search=${encodeURIComponent(search)}` : '';
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ absolute URL ‡πÅ‡∏ó‡∏ô relative path
      const response = await fetch(`http://localhost:8080/api/skills${params}`);
      
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP status
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('Response is not JSON:', textResponse);
        throw new Error('Server response is not JSON');
      }
      
      const data = await response.json();
      
      if (data.success && data.data) {
        setSkills(data.data);
      } else {
        console.error('API response structure is incorrect:', data);
        throw new Error(data.message || 'Invalid API response');
      }
    } catch (error) {
      console.error('Error fetching skills:', error);
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSkills();
  }, []);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° error handling)
  const handleAddSkill = async (values: any) => {
    try {
      // ‚úÖ ‡πÉ‡∏ä‡πâ absolute URL ‡πÅ‡∏ó‡∏ô relative path
      const response = await fetch('http://localhost:8080/api/skills', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ skill_name: values.skill_name })
      });

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP status
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('Response is not JSON:', textResponse);
        throw new Error('Server response is not JSON');
      }

      const data = await response.json();
      
      if (data.success) {
        message.success(
          data.data.is_new 
            ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' 
            : '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß'
        );
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô selection
        const newSkillName = values.skill_name;
        if (!value.includes(newSkillName)) {
          const updatedSkills = [...value, newSkillName];
          onChange?.(updatedSkills);
        }
        
        // Refresh skills list
        fetchSkills();
        
        setIsModalVisible(false);
        form.resetFields();
      } else {
        throw new Error(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞');
      }
    } catch (error: any) {
      console.error('Error adding skill:', error);
      message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞');
    }
  };

  return (
    <>
      <Select
        mode="tags"
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        onSearch={fetchSkills}
        loading={loading}
        style={{ width: '100%' }}
        showSearch
        filterOption={false}
        notFoundContent={loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'}
        dropdownRender={(menu) => (
          <>
            {menu}
            <div style={{ 
              padding: '8px', 
              borderTop: '1px solid #f0f0f0',
              textAlign: 'center' 
            }}>
              <Button
                type="text"
                icon={<PlusOutlined />}
                onClick={() => setIsModalVisible(true)}
                style={{ width: '100%' }}
              >
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
          </>
        )}
      >
        {skills.map(skill => (
          <Option key={skill.id} value={skill.name}>
            {skill.name}
          </Option>
        ))}
      </Select>

      {/* Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞ */}
      <Modal
        title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡∏°‡πà"
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false);
          form.resetFields();
        }}
        footer={null}
        width={400}
        destroyOnClose={true}
      >
        <Form form={form} onFinish={handleAddSkill} layout="vertical">
          <Form.Item
            label="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞"
            name="skill_name"
            rules={[
              { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞' },
              { min: 2, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
              { max: 100, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
            ]}
          >
            <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô React, Digital Marketing" />
          </Form.Item>

          <div style={{ textAlign: 'right', marginTop: '20px' }}>
            <Button 
              onClick={() => {
                setIsModalVisible(false);
                form.resetFields();
              }}
              style={{ marginRight: '8px' }}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button type="primary" htmlType="submit">
              ‡πÄ‡∏û‡∏¥‡πà‡∏°
            </Button>
          </div>
        </Form>

        {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Note ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debugging */}
        <div style={{ 
          marginTop: '16px', 
          padding: '8px', 
          backgroundColor: '#f6ffed', 
          borderRadius: '4px',
          fontSize: '12px',
          color: '#666'
        }}>
          üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend Server ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà http://localhost:8080
        </div>
      </Modal>
    </>
  );
};

export default SkillSelect;
