// // src/context/AuthContext.tsx
// import React, { createContext, useState, useEffect, type ReactNode, useContext } from 'react';
// import { useNavigate } from 'react-router-dom';

// interface User {
//     id: number;
//     username: string;
//     role: string;
// }

// interface AuthContextType {
//     user: User | null;
//     token: string | null;
//     login: (userData: User, token: string) => void;
//     logout: () => void;
//     isAuthenticated: boolean;
// }

// export const AuthContext = createContext<AuthContextType | null>(null);

// export const useAuth = () => {
//     const context = useContext(AuthContext);
//     if (!context) {
//         throw new Error("useAuth must be used within an AuthProvider");
//     }
//     return context;
// };

// interface AuthProviderProps {
//     children: ReactNode;
// }

// export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
//     const [user, setUser] = useState<User | null>(null);
//     const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));
//     const navigate = useNavigate();

//     useEffect(() => {
//         const storedUser = localStorage.getItem('user');
//         // ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡πÅ‡∏•‡∏∞ token ‡πÉ‡∏ô localStorage ‡∏Å‡πá‡∏û‡∏≠
//         if (storedUser && token) {
//             setUser(JSON.parse(storedUser));
//         }
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//     }, [token]);
//     //...

//     const login = (userData: User, token: string) => {
//         localStorage.setItem('user', JSON.stringify(userData));
//         localStorage.setItem('token', token);
//         setUser(userData);
//         setToken(token);
//     };

//     const logout = () => {
//         localStorage.removeItem('user');
//         localStorage.removeItem('token');
//         setUser(null);
//         setToken(null);
//         navigate('/login');
//     };

//     const isAuthenticated = !!token;

//     return (
//         <AuthContext.Provider value={{ user, token, login, logout, isAuthenticated }}>
//             {children}
//         </AuthContext.Provider>
//     );
// };

// src/context/AuthContext.tsx
// import React, { createContext, useState, useEffect, type ReactNode, useContext } from 'react';
// // import { useNavigate } from 'react-router-dom'; // üëà 1. ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡∏¢

// interface User {
//     id: number;
//     username: string;
//     role: string;
//     // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÉ‡∏ô user object
//     name?: string;
//     email?: string;
//     tel?: string;
// }

// interface AuthContextType {
//     user: User | null;
//     token: string | null;
//     login: (userData: User, token: string) => void;
//     logout: () => void;
//     isAuthenticated: boolean;
// }

// export const AuthContext = createContext<AuthContextType | null>(null);

// export const useAuth = () => {
//     const context = useContext(AuthContext);
//     if (!context) {
//         throw new Error("useAuth must be used within an AuthProvider");
//     }
//     return context;
// };

// interface AuthProviderProps {
//     children: ReactNode;
// }

// export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
//     const [user, setUser] = useState<User | null>(null);
//     const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));
//     // const navigate = useNavigate(); // üëà 2. ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢

//     useEffect(() => {
//         const storedUser = localStorage.getItem('user');
//         if (storedUser && token) {
//             try {
//                 setUser(JSON.parse(storedUser));
//             } catch (error) {
//                 console.error("Failed to parse user data from localStorage", error);
//                 logout();
//             }
//         }
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//     }, [token]);

//     const login = (userData: User, token: string) => {
//         localStorage.setItem('user', JSON.stringify(userData));
//         localStorage.setItem('token', token);
//         setUser(userData);
//         setToken(token);
//     };

//     const logout = () => {
//         localStorage.removeItem('user');
//         localStorage.removeItem('token');
//         setUser(null);
//         setToken(null);
//         // navigate('/login'); // üëà 3. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å navigate
//         window.location.href = '/login'; // üëà ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
//     };

//     const isAuthenticated = !!token;

//     return (
//         <AuthContext.Provider value={{ user, token, login, logout, isAuthenticated }}>
//             {children}
//         </AuthContext.Provider>
//     );
// };

// // src/context/AuthContext.tsx
// import React, { createContext, useState, useEffect, type ReactNode, useContext } from 'react';

// interface User {
//   id: number;
//   username: string;
//   role: string;
//   // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
//   name?: string;
//   email?: string;
//   tel?: string;
// }

// interface AuthContextType {
//   user: User | null;
//   token: string | null;
//   login: (userData: User, token: string) => void;
//   logout: () => void;
//   isAuthenticated: boolean;
// }

// export const AuthContext = createContext<AuthContextType | null>(null);

// export const useAuth = () => {
//   const context = useContext(AuthContext);
//   if (!context) {
//     throw new Error("useAuth must be used within an AuthProvider");
//   }
//   return context;
// };

// interface AuthProviderProps {
//   children: ReactNode;
// }

// export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
//   const [user, setUser] = useState<User | null>(null);
//   const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));

//   useEffect(() => {
//     const storedUser = localStorage.getItem('user');
//     if (storedUser && token) {
//       try {
//         setUser(JSON.parse(storedUser));
//       } catch (error) {
//         console.error("Failed to parse user data from localStorage", error);
//         logout();
//       }
//     }
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//   }, [token]);

//   const login = (userData: User, token: string) => {
//     // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö user ‡πÅ‡∏•‡∏∞ token ‡πÉ‡∏ô localStorage
//     localStorage.setItem('user', JSON.stringify(userData));
//     localStorage.setItem('token', token);

//     // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô cookie (service API ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
//     document.cookie = `auth_token=${token}; path=/; max-age=${60 * 60 * 24}`;

//     setUser(userData);
//     setToken(token);
//   };

//   const logout = () => {
//     // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
//     localStorage.removeItem('user');
//     localStorage.removeItem('token');

//     // ‚úÖ ‡∏•‡∏ö cookie
//     document.cookie = "auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

//     setUser(null);
//     setToken(null);

//     // ‚úÖ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
//     window.location.href = '/login';
//   };

//   const isAuthenticated = !!token;

//   return (
//     <AuthContext.Provider value={{ user, token, login, logout, isAuthenticated }}>
//       {children}
//     </AuthContext.Provider>
//   );
// };


// src/context/AuthContext.tsx
import React, { createContext, useState, useEffect, type ReactNode, useContext } from 'react';

interface User {
  id: number;
  username: string;
  role: string;
  name?: string;
  email?: string;
  tel?: string;
}

interface AuthContextType {
  user: User | null;
  token: string | null;
  login: (userData: User, token: string) => void;
  logout: () => void;
  isAuthenticated: boolean;
}

export const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(() => localStorage.getItem('token'));

  // ‚ú® vvvv ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç vvvv ‚ú®
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    // ‡∏≠‡πà‡∏≤‡∏ô token ‡∏à‡∏≤‡∏Å state ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å localStorage
    if (storedUser && token) {
      try {
        setUser(JSON.parse(storedUser));
        // ‚úÖ **[‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç]** ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á cookie ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ API service ‡∏à‡∏∞‡∏°‡∏µ cookie ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        document.cookie = `auth_token=${token}; path=/; max-age=${60 * 60 * 24}`; // ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ cookie 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      } catch (error) {
        console.error("Failed to parse user data from localStorage", error);
        logout(); // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ logout
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ token ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

  const login = (userData: User, token: string) => {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage
    localStorage.setItem('user', JSON.stringify(userData));
    localStorage.setItem('token', token);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á cookie
    document.cookie = `auth_token=${token}; path=/; max-age=${60 * 60 * 24}`;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    setUser(userData);
    setToken(token);
  };

  const logout = () => {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
    localStorage.removeItem('user');
    localStorage.removeItem('token');

    // ‡∏•‡∏ö cookie
    document.cookie = "auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
    setUser(null);
    setToken(null);

    // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    window.location.href = '/login';
  };

  const isAuthenticated = !!token;

  return (
    <AuthContext.Provider value={{ user, token, login, logout, isAuthenticated }}>
      {children}
    </AuthContext.Provider>
  );
};