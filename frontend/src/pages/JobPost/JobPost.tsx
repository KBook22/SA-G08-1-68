// import React, { useState } from "react";
// import { Form, Input, Button, Modal, Result } from "antd";
// import JobTypeSelector from "./JobTypeSelector";
// import Location from "./Location";
// import WorkTimeAndDeadline from "./WorkTimeAndDeadline";
// import JobPostingSection from "./JobPostingSection";
// import "./JobPost.css";
// import PageHeader from "../../components/PageHeader";
// import lahui from "../../assets/lahui.svg"; // ‚úÖ default logo

// const JobPost: React.FC = () => {
//   const [form] = Form.useForm();
//   const [open, setOpen] = useState(false);
//   const [imagePreview, setImagePreview] = useState<string | null>(null);

//   // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î submit
//   const handleFinish = (values: any) => {
//     const oldPosts = JSON.parse(localStorage.getItem("posts") || "[]");

//     const newPost = {
//       id: oldPosts.length + 1,
//       title: values.Name,
//       salary: values.Salary || "12,000 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
//       location: values.Location || "‡∏°‡∏ó‡∏™. ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 4",
//       image: imagePreview || lahui,   // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏ä‡πâ default logo
//     };

//     localStorage.setItem("posts", JSON.stringify([...oldPosts, newPost]));
//     setOpen(true);
//   };

//   const handleClose = () => {
//     setOpen(false);
//     setImagePreview(null);
//     // form.resetFields(); // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
//   };

//   // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
//   const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     const file = e.target.files?.[0];
//     if (file) {
//       const reader = new FileReader();
//       reader.onloadend = () => {
//         setImagePreview(reader.result as string); // ‚úÖ base64 string
//       };
//       reader.readAsDataURL(file); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
//     }
//   };

//   return (

//     <div 
//       style={{
//         paddingTop: 50,
//         display: "flex",
//         flexDirection: "column",
//         alignItems: "center",
//         background: "white"
//       }}
//     >
//       <Form
//         form={form}
//         layout="vertical"
//         style={{ width: "100%", maxWidth: 800 }}
//         autoComplete="off"
//         onFinish={handleFinish}
//       >
//         <div className="JopPost-container">
//           <PageHeader title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô" />
//         </div>

//         {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Å‡∏£‡∏≠‡∏Å */}
//         <Form.Item
//           label={<span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</span>}
//           name="Name"
//           rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" }]}
//         >
//           <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" size="large" />
//         </Form.Item>

//         <JobTypeSelector />
//         <Location />
//         <WorkTimeAndDeadline />
//         <JobPostingSection />

//         {/* upload ‡∏£‡∏π‡∏õ */}
//         <Form.Item label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏£‡πâ‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)">
//           <input type="file" accept="image/*" onChange={handleImageChange} />
//           {imagePreview && (
//             <img
//               src={imagePreview}
//               alt="preview"
//               style={{ marginTop: "10px", width: "120px", borderRadius: "8px" }}
//             />
//           )}
//         </Form.Item>

//         {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
//         <div className="submit-button-wrapper">
//           <Button
//             type="primary"
//             size="large"
//             htmlType="submit"
//             className="submit-button"
//           >
//             ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
//           </Button>
//         </div>
//       </Form>

//       {/* Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
//       <Modal
//         open={open}
//         onCancel={handleClose}
//         footer={null}
//         centered
//         width={450}
//         className="success-modal"
//       >
//         <Result
//           status="success"
//           title="‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
//           subTitle={
//             <>
//               ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ <br />
//               ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ <br />
//               ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
//             </>
//           }
//         />
//       </Modal>
//     </div>
//   );
// };

// export default JobPost;

import React, { useState } from "react";
import {
  Form,
  Input,
  Button,
  Modal,
  Result,
  Upload,
  message,
  DatePicker,
  Alert,
  Select,
  Radio,
  Card,
  Row,
  Col,
  TimePicker,
} from "antd";
import { UploadOutlined, LoadingOutlined, PlusOutlined } from "@ant-design/icons";
import type { UploadProps, RadioChangeEvent } from "antd";
import axios from "axios";
import "./JobPost.css";
import PageHeader from "../../components/PageHeader";
import lahui from "../../assets/lahui.svg"; // ‚úÖ default logo

const { TextArea } = Input;
const { RangePicker } = TimePicker;

const JobPost: React.FC = () => {
  const [form] = Form.useForm();
  const [open, setOpen] = useState(false);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ submit ‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleFinish = async (values: any) => {
    try {
      const payload = {
        title: values.Name,
        description: values.jobDetails,
        salary: Number(values.compensation),
        location_id: 1,          // üëà ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ fix id = 1 ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        employer_id: 1,
        job_category_id: 1,
        employment_type_id: 1,
        salary_type_id: 1,
        deadline: values.applicationDeadline.toISOString(), 
        status: "Open"
      };

      console.log("üì§ ‡∏™‡πà‡∏á‡πÑ‡∏õ backend:", payload);

      await axios.post("http://localhost:8080/api/jobposts", payload);

      setOpen(true);
    } catch (error: any) {
      console.error("‚ùå Error:", error.response?.data || error.message);
      message.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    }
  };

  const handleClose = () => {
    setOpen(false);
    setImagePreview(null);
    form.resetFields();
  };

  // ‚úÖ Upload Image (preview base64)
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => setImagePreview(reader.result as string);
      reader.readAsDataURL(file);
    }
  };

  // ‚úÖ UploadImages inline
  const UploadImages: React.FC = () => {
    const [loading, setLoading] = useState(false);
    const [imageUrl, setImageUrl] = useState<string | undefined>();

    const getBase64 = (file: File, callback: (url: string) => void) => {
      const reader = new FileReader();
      reader.addEventListener("load", () => callback(reader.result as string));
      reader.readAsDataURL(file);
    };

    const beforeUpload = (file: File) => {
      const isJpgOrPng = file.type === "image/jpeg" || file.type === "image/png";
      if (!isJpgOrPng) {
        message.error("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà JPG/PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!");
      }
      const isLt2M = file.size / 1024 / 1024 < 2;
      if (!isLt2M) {
        message.error("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2MB!");
      }
      return isJpgOrPng && isLt2M;
    };

    const handleChange: UploadProps["onChange"] = (info) => {
      if (info.file.status === "uploading") {
        setLoading(true);
        return;
      }
      if (info.file.status === "done") {
        const url = info.file.response?.url;
        setLoading(false);
        if (url) {
          setImageUrl(url);
        } else {
          getBase64(info.file.originFileObj as File, (base64Url) => {
            setImageUrl(base64Url);
          });
        }
      }
    };

    const uploadButton = (
      <Button style={{ border: 0, background: "none" }}>
        {loading ? <LoadingOutlined /> : <PlusOutlined />}
        <div style={{ marginTop: 8 }}>Upload</div>
      </Button>
    );

    return (
      <Upload
        name="avatar"
        listType="picture-card"
        showUploadList={false}
        action="https://660d2bd96ddfa2943b33731c.mockapi.io/api/upload"
        beforeUpload={beforeUpload}
        onChange={handleChange}
      >
        {imageUrl ? (
          <img src={imageUrl} alt="avatar" style={{ width: "100%" }} />
        ) : (
          uploadButton
        )}
      </Upload>
    );
  };

  // ‚úÖ JobTypeSelector inline
  const JobTypeSelector: React.FC = () => {
    const [value, setValue] = useState<string>("part-time");
    const onChange = (e: RadioChangeEvent) => setValue(e.target.value);

    const jobTypes = [
      { label: "‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)", value: "freelance" },
      { label: "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡πâ‡∏≤‡∏á (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏£‡∏≤‡∏¢‡∏õ‡∏µ)", value: "contract" },
      { label: "‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÑ‡∏ó‡∏°‡πå (‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)", value: "part-time" },
      { label: "‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥", value: "full-time" },
    ];

    return (
      <Form.Item
        label="‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏á‡∏≤‡∏ô"
        name="jobType"
        rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô" }]}
      >
        <Radio.Group onChange={onChange} value={value} style={{ width: "100%" }}>
          <div style={{ display: "grid", gap: 12 }}>
            {jobTypes.map((job) => (
              <Card
                key={job.value}
                onClick={() => setValue(job.value)}
                className={value === job.value ? "custom-card-selected" : ""}
              >
                <Radio value={job.value}>{job.label}</Radio>
              </Card>
            ))}
          </div>
        </Radio.Group>
      </Form.Item>
    );
  };

  // ‚úÖ Location inline
  const Location: React.FC = () => (
    <Form.Item
      label="‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á"
      name="location"
      rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Location" }]}
    >
      <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å Location" size="large" />
    </Form.Item>
  );

  // ‚úÖ WorkTimeAndDeadline inline
  const WorkTimeAndDeadline: React.FC = () => (
    <Row gutter={16}>
      <Col span={12}>
        <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°-‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" name="workTime">
          <RangePicker format="HH:mm" size="large" style={{ width: "100%" }} />
        </Form.Item>
      </Col>
      <Col span={12}>
        <Form.Item
          label="‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏ï‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"
          name="applicationDeadline"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏ï‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£" }]}
        >
          <DatePicker size="large" style={{ width: "100%" }} format="YYYY-MM-DD" />
        </Form.Item>
      </Col>
    </Row>
  );

  return (
    <div
      style={{
        paddingTop: 50,
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        background: "white",
      }}
    >
      <Form
        form={form}
        layout="vertical"
        style={{ width: "100%", maxWidth: 800 }}
        autoComplete="off"
        onFinish={handleFinish}
      >
        <PageHeader title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô" />

        <Form.Item
          label="‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô"
          name="Name"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" }]}
        >
          <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" size="large" />
        </Form.Item>

        <JobTypeSelector />
        <Location />
        <WorkTimeAndDeadline />

        <Form.Item
          label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô"
          name="jobDetails"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô" }]}
        >
          <TextArea rows={4} placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô" />
        </Form.Item>

        <Form.Item
          label="‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
          name="compensation"
          rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" }]}
        >
          <Input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô" />
        </Form.Item>

        <Form.Item label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏£‡πâ‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)">
          <input type="file" accept="image/*" onChange={handleImageChange} />
          {imagePreview && (
            <img
              src={imagePreview}
              alt="preview"
              style={{ marginTop: 10, width: 120, borderRadius: 8 }}
            />
          )}
        </Form.Item>

        <Form.Item label="‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°">
          <UploadImages />
        </Form.Item>

        <Alert
          message="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
          description="‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏´‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏ù‡∏∑‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"
          type="warning"
          showIcon
        />

        <div className="submit-button-wrapper" style={{ marginTop: 20 }}>
          <Button type="primary" size="large" htmlType="submit" className="submit-button">
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
          </Button>
        </div>
      </Form>

      <Modal open={open} onCancel={handleClose} footer={null} centered width={450}>
        <Result
          status="success"
          title="‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
          subTitle="‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤"
        />
      </Modal>
    </div>
  );
};

export default JobPost;
