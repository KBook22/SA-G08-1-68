// // src/pages/HelpCenter/CreateRequestPage.tsx
// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import {
//   Card,
//   Form,
//   Input,
//   Button,
//   Typography,
//   Space,
//   message,
//   Steps,
//   Row,
//   Col,
//   Alert
// } from 'antd';
// import {
//   ArrowLeftOutlined,
//   SendOutlined,
//   FileTextOutlined,
//   CheckCircleOutlined
// } from '@ant-design/icons';

// const { Title, Text, Paragraph } = Typography;
// const { TextArea } = Input;

// const API_URL = 'http://localhost:8080/api';

// const CreateRequestPage: React.FC = () => {
//   const navigate = useNavigate();
//   const [form] = Form.useForm();
//   const [loading, setLoading] = useState(false);
//   const [currentStep, setCurrentStep] = useState(0);

//   const handleSubmit = async (values: { subject: string; initial_message: string }) => {
//     setLoading(true);
//     try {
//       const token = localStorage.getItem('token');
      
//       if (!token) {
//         message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
//         navigate('/login');
//         return;
//       }

//       const response = await fetch(`${API_URL}/tickets`, {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${token}`
//         },
//         body: JSON.stringify({
//           subject: values.subject,
//           initial_message: values.initial_message
//         })
//       });

//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to create ticket');
//       }

//       const ticketData = await response.json();
      
//       // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//       setCurrentStep(1);
//       message.success('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
      
//       // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Help Center ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
//       setTimeout(() => {
//         navigate('/help?tab=2');
//       }, 2000);

//     } catch (error: any) {
//       console.error('Error creating ticket:', error);
//       message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const steps = [
//     {
//       title: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
//       icon: <FileTextOutlined />,
//     },
//     {
//       title: '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
//       icon: <CheckCircleOutlined />,
//     },
//   ];

//   if (currentStep === 1) {
//     return (
//       <div style={{ 
//         backgroundColor: '#eff3fb', 
//         minHeight: '100vh',
//         padding: '40px 20px' 
//       }}>
//         <div style={{ maxWidth: '600px', margin: '0 auto' }}>
//           <Card style={{
//             borderRadius: '16px',
//             textAlign: 'center',
//             boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)'
//           }}>
//             <div style={{ padding: '40px 20px' }}>
//               <CheckCircleOutlined 
//                 style={{ 
//                   fontSize: '64px', 
//                   color: '#52c41a', 
//                   marginBottom: '24px' 
//                 }} 
//               />
//               <Title level={2} style={{ color: '#52c41a', marginBottom: '16px' }}>
//                 ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
//               </Title>
//               <Paragraph style={{ fontSize: '16px', marginBottom: '24px' }}>
//                 ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
//               </Paragraph>
//               <Text type="secondary">
//                 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...
//               </Text>
//             </div>
//           </Card>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div style={{ 
//       backgroundColor: '#eff3fb', 
//       minHeight: '100vh',
//       padding: '40px 20px' 
//     }}>
//       <div style={{ maxWidth: '800px', margin: '0 auto' }}>
        
//         {/* Header */}
//         <div style={{ marginBottom: '32px' }}>
//           <Button
//             icon={<ArrowLeftOutlined />}
//             onClick={() => navigate('/help')}
//             style={{ marginBottom: '16px' }}
//           >
//             ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
//           </Button>
          
//           <Title level={1} style={{ color: '#1d39c4', marginBottom: '8px' }}>
//             üìù ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
//           </Title>
//           <Text style={{ fontSize: '16px', color: '#666' }}>
//             ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
//           </Text>
//         </div>

//         {/* Progress Steps */}
//         <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
//           <Steps current={currentStep} items={steps} />
//         </Card>

//         {/* Main Form */}
//         <Card style={{
//           borderRadius: '16px',
//           boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)'
//         }}>
//           <Row gutter={[24, 24]}>
//             {/* Form Section */}
//             <Col xs={24} lg={16}>
//               <Title level={3} style={{ marginBottom: '24px' }}>
//                 ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
//               </Title>
              
//               <Form
//                 form={form}
//                 layout="vertical"
//                 onFinish={handleSubmit}
//                 size="large"
//               >
//                 <Form.Item
//                   name="subject"
//                   label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
//                   rules={[
//                     { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á' },
//                     { min: 5, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
//                     { max: 100, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
//                   ]}
//                 >
//                   <Input 
//                     placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
//                     style={{ borderRadius: '8px' }}
//                   />
//                 </Form.Item>

//                 <Form.Item
//                   name="initial_message"
//                   label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
//                   rules={[
//                     { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤' },
//                     { min: 10, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
//                     { max: 1000, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
//                   ]}
//                 >
//                   <TextArea
//                     rows={6}
//                     placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†a‡∏û"
//                     style={{ borderRadius: '8px' }}
//                     showCount
//                     maxLength={1000}
//                   />
//                 </Form.Item>

//                 <Form.Item style={{ marginBottom: 0 }}>
//                   <Space size="middle" style={{ width: '100%' }}>
//                     <Button
//                       size="large"
//                       onClick={() => navigate('/help')}
//                       style={{ borderRadius: '8px', minWidth: '120px' }}
//                     >
//                       ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
                    
//                     <Button
//                       type="primary"
//                       htmlType="submit"
//                       loading={loading}
//                       icon={<SendOutlined />}
//                       size="large"
//                       style={{
//                         borderRadius: '8px',
//                         minWidth: '120px',
//                         background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
//                         border: 'none'
//                       }}
//                     >
//                       ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
//                     </Button>
//                   </Space>
//                 </Form.Item>
//               </Form>
//             </Col>

//             {/* Info Section */}
//             <Col xs={24} lg={8}>
//               <div style={{ padding: '0 16px' }}>
//                 <Title level={4} style={{ marginBottom: '16px' }}>
//                   üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
//                 </Title>
                
//                 <Alert
//                   message="‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
//                   description={
//                     <ul style={{ margin: '8px 0', paddingLeft: '16px' }}>
//                       <li>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
//                       <li>‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</li>
//                       <li>‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</li>
//                       <li>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</li>
//                     </ul>
//                   }
//                   type="info"
//                   style={{ marginBottom: '16px' }}
//                 />

//                 <Card size="small" style={{ backgroundColor: '#f8f9fa' }}>
//                   <Title level={5} style={{ marginBottom: '8px' }}>
//                     üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô
//                   </Title>
//                   <Text strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</Text> support@sutcareer.com<br />
//                   <Text strong>‡πÇ‡∏ó‡∏£:</Text> 02-123-4567<br />
//                   <Text strong>‡πÄ‡∏ß‡∏•‡∏≤:</Text> ‡∏à-‡∏® 9:00-17:00
//                 </Card>
//               </div>
//             </Col>
//           </Row>
//         </Card>
//       </div>
//     </div>
//   );
// };

// export default CreateRequestPage;
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Card,
  Form,
  Input,
  Button,
  Typography,
  Space,
  message,
  Steps,
  Row,
  Col,
  Alert,
  Upload,
} from 'antd';
import type { UploadFile, UploadProps } from 'antd';
import {
  ArrowLeftOutlined,
  SendOutlined,
  FileTextOutlined,
  CheckCircleOutlined,
  PaperClipOutlined,
} from '@ant-design/icons';

const { Title, Paragraph } = Typography;
const { TextArea } = Input;

// ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const API_URL = 'http://localhost:8080/api';

type Attachment = { url: string; name: string; type: string };

const CreateRequestPage: React.FC = () => {
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  // --- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase ‡∏ú‡πà‡∏≤‡∏ô Backend ---
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [attachments, setAttachments] = useState<Attachment[]>([]);

  const uploadToBackend: UploadProps['customRequest'] = async (options) => {
    const { file, onSuccess, onError } = options;
    try {
      const realFile = file as File;

      // Backend ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "images" (jpg/png/webp/gif/bmp)
      if (!realFile.type?.startsWith('image/')) {
        message.error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        onError?.(new Error('invalid file type'));
        return;
      }

      const fd = new FormData();
      fd.append('file', realFile);

      const token = localStorage.getItem('token');
      const res = await fetch(`${API_URL}/upload`, {
        method: 'POST',
        headers: token ? { Authorization: `Bearer ${token}` } : undefined,
        body: fd,
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏Å‡∏±‡∏ö Ticket
      setAttachments((prev) => [
        ...prev,
        { url: data.url, name: realFile.name, type: realFile.type || 'image/*' },
      ]);
      onSuccess?.(data as any);
      message.success('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (err: any) {
      message.error(err?.message || '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      onError?.(err);
    }
  };

  const handleSubmit = async (values: { subject: string; initial_message: string }) => {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
        navigate('/login');
        return;
      }

      // ‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket
      const response = await fetch(`${API_URL}/tickets`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          subject: values.subject,
          initial_message: values.initial_message,
          attachments, // <<<< ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      await response.json();

      setCurrentStep(1);
      message.success('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
      setTimeout(() => navigate('/help?tab=2'), 2000);
    } catch (error: any) {
      console.error('Error creating ticket:', error);
      message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
    } finally {
      setLoading(false);
    }
  };

  const steps = [
    { title: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', icon: <FileTextOutlined /> },
    { title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', icon: <CheckCircleOutlined /> },
  ];

  return (
    <div className="help-center-container">
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
      <Card
        style={{
          marginBottom: '24px',
          borderRadius: '16px',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          border: 'none',
          color: 'white',
        }}
      >
        <Row justify="space-between" align="middle">
          <Col>
            <Button
              icon={<ArrowLeftOutlined />}
              onClick={() => navigate('/help')}
              style={{
                background: 'rgba(255, 255, 255, 0.2)',
                border: 'none',
                color: 'white',
                borderRadius: '8px',
              }}
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            </Button>
          </Col>
        </Row>

        <div style={{ textAlign: 'center', marginTop: '20px' }}>
          <Title level={2} style={{ color: 'white', margin: '0 0 8px 0' }}>
            ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          </Title>
          <Paragraph style={{ color: 'rgba(255, 255, 255, 0.8)', margin: 0, fontSize: '16px' }}>
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
          </Paragraph>
        </div>
      </Card>

      {/* ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô */}
      <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
        <Steps current={currentStep} items={steps} style={{ maxWidth: '400px', margin: '0 auto' }} />
      </Card>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° */}
      {currentStep === 0 && (
        <Card
          title={
            <Space>
              <FileTextOutlined style={{ color: '#1890ff' }} />
              <span>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á</span>
            </Space>
          }
          style={{ borderRadius: '12px' }}
        >
          <Form
            form={form}
            layout="vertical"
            onFinish={handleSubmit}
            style={{ maxWidth: '800px', margin: '0 auto' }}
            size="large"
          >
            <Form.Item
              label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"
              name="subject"
              rules={[
                { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠' },
                { min: 5, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
              ]}
            >
              <Input
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                style={{ borderRadius: '8px', height: '48px' }}
              />
            </Form.Item>

            <Form.Item
              label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
              name="initial_message"
              rules={[
                { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤' },
                { min: 20, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
              ]}
            >
              <TextArea
                rows={6}
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                style={{ borderRadius: '8px' }}
              />
            </Form.Item>

            {/* ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase ‡∏ú‡πà‡∏≤‡∏ô Backend) */}
            <Form.Item
              label="‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)"
              extra="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .jpg, .jpeg, .png, .gif, .webp, .bmp"
            >
              <Upload
                multiple
                accept="image/*"
                listType="picture"
                fileList={fileList}
                customRequest={uploadToBackend}
                beforeUpload={(file) => {
                  if (!file.type?.startsWith('image/')) {
                    message.error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
                    return Upload.LIST_IGNORE;
                  }
                  return true;
                }}
                onChange={({ fileList: fl }) => setFileList(fl)}
                onRemove={(file) => {
                  setAttachments((prev) => prev.filter((a) => a.name !== file.name));
                  return true;
                }}
              >
                <Button icon={<PaperClipOutlined />}>‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</Button>
              </Upload>
            </Form.Item>

            <Alert
              message="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
              description="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
              type="info"
              showIcon
              style={{ marginBottom: '24px', borderRadius: '8px' }}
            />

            <Form.Item style={{ textAlign: 'center', marginBottom: 0 }}>
              <Space size="large">
                <Button
                  size="large"
                  onClick={() => navigate('/help')}
                  style={{ borderRadius: '8px', minWidth: '120px' }}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
                <Button
                  type="primary"
                  htmlType="submit"
                  loading={loading}
                  size="large"
                  icon={<SendOutlined />}
                  style={{
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    border: 'none',
                    borderRadius: '8px',
                    minWidth: '120px',
                  }}
                >
                  ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
                </Button>
              </Space>
            </Form.Item>
          </Form>
        </Card>
      )}

      {/* ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
      {currentStep === 1 && (
        <Card
          style={{
            borderRadius: '12px',
            textAlign: 'center',
            background: 'linear-gradient(135deg, #52c41a 0%, #389e0d 100%)',
            color: 'white',
            border: 'none',
          }}
        >
          <div className="success-icon">
            <CheckCircleOutlined style={{ fontSize: '64px', color: 'white', marginBottom: '16px' }} />
          </div>
          <Title level={2} style={{ color: 'white', margin: '0 0 16px 0' }}>
            ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
          </Title>
          <Paragraph style={{ color: 'rgba(255, 255, 255, 0.9)', fontSize: '16px' }}>
            ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            <br />
            ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
          </Paragraph>
        </Card>
      )}
    </div>
  );
};

export default CreateRequestPage;