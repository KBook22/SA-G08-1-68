// // src/pages/HelpCenter/CreateRequestPage.tsx
// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import {
//   Card,
//   Form,
//   Input,
//   Button,
//   Typography,
//   Space,
//   message,
//   Steps,
//   Row,
//   Col,
//   Alert
// } from 'antd';
// import {
//   ArrowLeftOutlined,
//   SendOutlined,
//   FileTextOutlined,
//   CheckCircleOutlined
// } from '@ant-design/icons';

// const { Title, Text, Paragraph } = Typography;
// const { TextArea } = Input;

// const API_URL = 'http://localhost:8080/api';

// const CreateRequestPage: React.FC = () => {
//   const navigate = useNavigate();
//   const [form] = Form.useForm();
//   const [loading, setLoading] = useState(false);
//   const [currentStep, setCurrentStep] = useState(0);

//   const handleSubmit = async (values: { subject: string; initial_message: string }) => {
//     setLoading(true);
//     try {
//       const token = localStorage.getItem('token');
      
//       if (!token) {
//         message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
//         navigate('/login');
//         return;
//       }

//       const response = await fetch(`${API_URL}/tickets`, {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${token}`
//         },
//         body: JSON.stringify({
//           subject: values.subject,
//           initial_message: values.initial_message
//         })
//       });

//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to create ticket');
//       }

//       const ticketData = await response.json();
      
//       // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//       setCurrentStep(1);
//       message.success('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
      
//       // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Help Center ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
//       setTimeout(() => {
//         navigate('/help?tab=2');
//       }, 2000);

//     } catch (error: any) {
//       console.error('Error creating ticket:', error);
//       message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const steps = [
//     {
//       title: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
//       icon: <FileTextOutlined />,
//     },
//     {
//       title: '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
//       icon: <CheckCircleOutlined />,
//     },
//   ];

//   if (currentStep === 1) {
//     return (
//       <div style={{ 
//         backgroundColor: '#eff3fb', 
//         minHeight: '100vh',
//         padding: '40px 20px' 
//       }}>
//         <div style={{ maxWidth: '600px', margin: '0 auto' }}>
//           <Card style={{
//             borderRadius: '16px',
//             textAlign: 'center',
//             boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)'
//           }}>
//             <div style={{ padding: '40px 20px' }}>
//               <CheckCircleOutlined 
//                 style={{ 
//                   fontSize: '64px', 
//                   color: '#52c41a', 
//                   marginBottom: '24px' 
//                 }} 
//               />
//               <Title level={2} style={{ color: '#52c41a', marginBottom: '16px' }}>
//                 ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
//               </Title>
//               <Paragraph style={{ fontSize: '16px', marginBottom: '24px' }}>
//                 ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
//               </Paragraph>
//               <Text type="secondary">
//                 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...
//               </Text>
//             </div>
//           </Card>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div style={{ 
//       backgroundColor: '#eff3fb', 
//       minHeight: '100vh',
//       padding: '40px 20px' 
//     }}>
//       <div style={{ maxWidth: '800px', margin: '0 auto' }}>
        
//         {/* Header */}
//         <div style={{ marginBottom: '32px' }}>
//           <Button
//             icon={<ArrowLeftOutlined />}
//             onClick={() => navigate('/help')}
//             style={{ marginBottom: '16px' }}
//           >
//             ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
//           </Button>
          
//           <Title level={1} style={{ color: '#1d39c4', marginBottom: '8px' }}>
//             üìù ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
//           </Title>
//           <Text style={{ fontSize: '16px', color: '#666' }}>
//             ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
//           </Text>
//         </div>

//         {/* Progress Steps */}
//         <Card style={{ marginBottom: '24px', borderRadius: '12px' }}>
//           <Steps current={currentStep} items={steps} />
//         </Card>

//         {/* Main Form */}
//         <Card style={{
//           borderRadius: '16px',
//           boxShadow: '0 4px 20px rgba(0, 0, 0, 0.08)'
//         }}>
//           <Row gutter={[24, 24]}>
//             {/* Form Section */}
//             <Col xs={24} lg={16}>
//               <Title level={3} style={{ marginBottom: '24px' }}>
//                 ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
//               </Title>
              
//               <Form
//                 form={form}
//                 layout="vertical"
//                 onFinish={handleSubmit}
//                 size="large"
//               >
//                 <Form.Item
//                   name="subject"
//                   label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
//                   rules={[
//                     { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á' },
//                     { min: 5, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
//                     { max: 100, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
//                   ]}
//                 >
//                   <Input 
//                     placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
//                     style={{ borderRadius: '8px' }}
//                   />
//                 </Form.Item>

//                 <Form.Item
//                   name="initial_message"
//                   label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
//                   rules={[
//                     { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤' },
//                     { min: 10, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' },
//                     { max: 1000, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
//                   ]}
//                 >
//                   <TextArea
//                     rows={6}
//                     placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†a‡∏û"
//                     style={{ borderRadius: '8px' }}
//                     showCount
//                     maxLength={1000}
//                   />
//                 </Form.Item>

//                 <Form.Item style={{ marginBottom: 0 }}>
//                   <Space size="middle" style={{ width: '100%' }}>
//                     <Button
//                       size="large"
//                       onClick={() => navigate('/help')}
//                       style={{ borderRadius: '8px', minWidth: '120px' }}
//                     >
//                       ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//                     </Button>
                    
//                     <Button
//                       type="primary"
//                       htmlType="submit"
//                       loading={loading}
//                       icon={<SendOutlined />}
//                       size="large"
//                       style={{
//                         borderRadius: '8px',
//                         minWidth: '120px',
//                         background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
//                         border: 'none'
//                       }}
//                     >
//                       ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
//                     </Button>
//                   </Space>
//                 </Form.Item>
//               </Form>
//             </Col>

//             {/* Info Section */}
//             <Col xs={24} lg={8}>
//               <div style={{ padding: '0 16px' }}>
//                 <Title level={4} style={{ marginBottom: '16px' }}>
//                   üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
//                 </Title>
                
//                 <Alert
//                   message="‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
//                   description={
//                     <ul style={{ margin: '8px 0', paddingLeft: '16px' }}>
//                       <li>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
//                       <li>‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</li>
//                       <li>‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</li>
//                       <li>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</li>
//                     </ul>
//                   }
//                   type="info"
//                   style={{ marginBottom: '16px' }}
//                 />

//                 <Card size="small" style={{ backgroundColor: '#f8f9fa' }}>
//                   <Title level={5} style={{ marginBottom: '8px' }}>
//                     üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô
//                   </Title>
//                   <Text strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</Text> support@sutcareer.com<br />
//                   <Text strong>‡πÇ‡∏ó‡∏£:</Text> 02-123-4567<br />
//                   <Text strong>‡πÄ‡∏ß‡∏•‡∏≤:</Text> ‡∏à-‡∏® 9:00-17:00
//                 </Card>
//               </div>
//             </Col>
//           </Row>
//         </Card>
//       </div>
//     </div>
//   );
// };

// export default CreateRequestPage;


// src/pages/HelpCenter/CreateRequestPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Card, Form, Input, Button, Typography, Space, message,
  Steps, Row, Col, Alert, Upload, Image, Progress
} from 'antd';
import {
  ArrowLeftOutlined, SendOutlined, FileTextOutlined,
  CheckCircleOutlined, PictureOutlined, DeleteOutlined
} from '@ant-design/icons';
import type { UploadFile } from 'antd';
import { uploadHelpCenterImage } from '../../lib/firebase';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;
const { Dragger } = Upload;

const API_URL = 'http://localhost:8080/api';

const CreateRequestPage: React.FC = () => {
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  
  // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° states ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const [imageFiles, setImageFiles] = useState<UploadFile[]>([]);
  const [uploadProgress, setUploadProgress] = useState<{[key: string]: number}>({});
  const [uploadingImages, setUploadingImages] = useState(false);

  // ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
  const handleImageUpload = async (file: File): Promise<string | null> => {
    try {
      setUploadingImages(true);
      setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));

      // Simulate progress (Firebase doesn't provide real progress for uploads)
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          const current = prev[file.name] || 0;
          if (current < 90) {
            return { ...prev, [file.name]: current + 10 };
          }
          return prev;
        });
      }, 100);

      const result = await uploadHelpCenterImage(file, 'ticket');
      
      clearInterval(progressInterval);
      setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));
      
      if (result) {
        message.success(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ${result.originalName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        return result.url;
      }
      return null;
    } catch (error: any) {
      message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ');
      return null;
    } finally {
      setUploadingImages(false);
      setTimeout(() => {
        setUploadProgress(prev => {
          const newProgress = { ...prev };
          delete newProgress[file.name];
          return newProgress;
        });
      }, 1000);
    }
  };

  const handleSubmit = async (values: { subject: string; initial_message: string }) => {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
        navigate('/login');
        return;
      }

      // ‚ú® ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
      const imageUrls: string[] = [];
      for (const fileObj of imageFiles) {
        if (fileObj.originFileObj) {
          const url = await handleImageUpload(fileObj.originFileObj);
          if (url) imageUrls.push(url);
        }
      }

      const requestData = {
        subject: values.subject,
        initial_message: values.initial_message,
        images: imageUrls // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      };

      const response = await fetch(`${API_URL}/tickets`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create ticket');
      }

      const ticketData = await response.json();
      setCurrentStep(1);
      message.success('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...');
      
      setTimeout(() => {
        navigate('/help?tab=2');
      }, 2000);

    } catch (error: any) {
      console.error('Error creating ticket:', error);
      message.error(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á');
    } finally {
      setLoading(false);
    }
  };

  // ‚ú® ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const uploadProps = {
    beforeUpload: (file: File) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      if (!file.type.startsWith('image/')) {
        message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return false;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
      if (file.size > 5 * 1024 * 1024) {
        message.error('‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
        return false;
      }

      return false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    },
    onChange: ({ fileList }: { fileList: UploadFile[] }) => {
      setImageFiles(fileList.slice(-3)); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 3 ‡∏£‡∏π‡∏õ
    },
    onRemove: (file: UploadFile) => {
      setImageFiles(prev => prev.filter(f => f.uid !== file.uid));
    },
    fileList: imageFiles,
    multiple: true,
    accept: 'image/*',
    listType: 'picture-card' as const,
  };

  const steps = [
    {
      title: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      icon: <FileTextOutlined />,
      description: '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á'
    },
    {
      title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      icon: <CheckCircleOutlined />,
      description: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    }
  ];

  if (currentStep === 1) {
    return (
      <div className="help-center-container">
        <Card 
          style={{ 
            maxWidth: 600, 
            margin: '50px auto',
            borderRadius: '16px',
            textAlign: 'center'
          }}
        >
          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Steps current={1} items={steps} />
            
            <div className="success-icon">
              <CheckCircleOutlined style={{ fontSize: '64px', color: '#52c41a' }} />
            </div>
            
            <Title level={3} style={{ color: '#52c41a' }}>
              ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
            </Title>
            
            <Paragraph>
              ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠...
            </Paragraph>

            <div className="success-redirect">
              <Progress percent={100} showInfo={false} />
            </div>
          </Space>
        </Card>
      </div>
    );
  }

  return (
    <div className="help-center-container">
      <Row justify="center">
        <Col xs={24} sm={20} md={16} lg={12}>
          <Card 
            className="create-request-form"
            style={{ 
              borderRadius: '16px',
              boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
            }}
          >
            {/* Header */}
            <div style={{ textAlign: 'center', marginBottom: '32px' }}>
              <Button 
                icon={<ArrowLeftOutlined />}
                type="text" 
                onClick={() => navigate('/help')}
                style={{ float: 'left' }}
              >
                ‡∏Å‡∏•‡∏±‡∏ö
              </Button>
              
              <Title level={3} style={{ margin: 0, color: '#1d39c4' }}>
                <FileTextOutlined /> ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
              </Title>
              
              <Text type="secondary">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              </Text>
            </div>

            <Steps current={0} items={steps} style={{ marginBottom: '32px' }} />

            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
              size="large"
            >
              <Form.Item
                name="subject"
                label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á"
                rules={[
                  { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á' },
                  { min: 5, message: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
                ]}
              >
                <Input 
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö, ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                  style={{ borderRadius: '8px' }}
                />
              </Form.Item>

              <Form.Item
                name="initial_message"
                label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                rules={[
                  { required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤' },
                  { min: 10, message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' }
                ]}
              >
                <TextArea
                  rows={6}
                  placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û..."
                  style={{ borderRadius: '8px' }}
                />
              </Form.Item>

              {/* ‚ú® ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
              <Form.Item label="‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)">
                <Dragger {...uploadProps} style={{ borderRadius: '8px' }}>
                  <p className="ant-upload-drag-icon">
                    <PictureOutlined style={{ fontSize: '48px', color: '#1890ff' }} />
                  </p>
                  <p className="ant-upload-text">
                    ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                  </p>
                  <p className="ant-upload-hint">
                    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG, GIF (‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏£‡∏π‡∏õ)
                  </p>
                </Dragger>

                {/* ‡πÅ‡∏™‡∏î‡∏á Progress ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
                {Object.entries(uploadProgress).map(([fileName, progress]) => (
                  <div key={fileName} style={{ marginTop: '8px' }}>
                    <Text style={{ fontSize: '12px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î {fileName}</Text>
                    <Progress percent={progress} size="small" />
                  </div>
                ))}
              </Form.Item>

              <Alert
                message="‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
                description="‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô"
                type="info"
                showIcon
                style={{ marginBottom: '24px', borderRadius: '8px' }}
              />

              <Form.Item style={{ marginBottom: 0, textAlign: 'center' }}>
                <Space size="middle">
                  <Button 
                    size="large"
                    onClick={() => navigate('/help')}
                    style={{ borderRadius: '8px', minWidth: '120px' }}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>
                  
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={loading || uploadingImages}
                    icon={<SendOutlined />}
                    size="large"
                    style={{
                      borderRadius: '8px',
                      minWidth: '160px',
                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      border: 'none'
                    }}
                  >
                    {uploadingImages ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ...' : loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á'}
                  </Button>
                </Space>
              </Form.Item>
            </Form>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default CreateRequestPage;
