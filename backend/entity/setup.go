package entity

import (
	"errors"
	"log"
	"gorm.io/gorm"
)

// SetupDatabase ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
func SetupDatabase(db *gorm.DB) {
	log.Println("üîß Setting up database entities...")

	// AutoMigrate ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Schema ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ
	// ‡∏´‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) GORM ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ
	err := db.AutoMigrate(
		// User Management
		&User{},
		&Admin{},
		&Student{},
		&Employer{},
		&Genders{},
		&Banks{},

		// ‚úÖ Faculty ‡πÅ‡∏•‡∏∞ Department ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
		&Faculty{},
		&Department{},

		// Student Profile & Posts
		&StudentProfilePost{},
		&StudentPost{},

		// Skills (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
		&Skill{},

		// Job Posting & Application
		&Jobpost{},
		&JobCategory{},
		&EmploymentType{},
		&SalaryType{},
		&Location{},
		&JobApplication{},
		&ResumeFile{},

		// Reviews
		&Reviews{},
		&Ratingscores{},

		// Payment System
		&Payments{},
		&PaymentMethods{},
		&Statuses{},
		&Orders{},
		&AddonServices{},
		&Discounts{},
		&BillableItems{},
		&PaymentReports{},

		// Q&A and Support
		&FAQ{},
		&RequestTicket{},
		&TicketReply{},

		// Reporting
		&Report{},
		&ReportStatus{},

		// Other systems
		&Interview{},
		&Worklog{},
		&ChatRoom{},
		&ChatHistory{},
	)

	if err != nil {
		log.Fatalf("‚ùå Failed to migrate database: %v", err)
	}

	log.Println("‚úÖ Database entities migration completed!")

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	seedGenders(db)                     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏®
	seedFacultiesAndDepartments(db)     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤

	log.Println("‚úÖ Entity seeding completed!")
}

// seedGenders ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏®‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func seedGenders(db *gorm.DB) {
	log.Println("üë• Seeding Genders...")

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏®‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var count int64
	db.Model(&Genders{}).Count(&count)
	
	if count == 0 {
		genders := []Genders{
			{Gender: "‡∏ä‡∏≤‡∏¢"},
			{Gender: "‡∏´‡∏ç‡∏¥‡∏á"},
			{Gender: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"},
		}

		for _, gender := range genders {
			if err := db.Create(&gender).Error; err != nil {
				log.Printf("‚ùå Error creating gender '%s': %v", gender.Gender, err)
			} else {
				log.Printf("‚úÖ Created gender: %s", gender.Gender)
			}
		}
		
		log.Printf("üéâ Genders seeding completed! Total: 3")
	} else {
		log.Printf("‚ö†Ô∏è Genders already exist, skipping seeding. Total: %d", count)
	}
}

// seedFacultiesAndDepartments ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func seedFacultiesAndDepartments(db *gorm.DB) {
	log.Println("üè´ Seeding Faculties and Departments...")

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var facultyCount int64
	db.Model(&Faculty{}).Count(&facultyCount)
	
	if facultyCount > 0 {
		log.Printf("‚ö†Ô∏è Faculties already exist, skipping seeding. Total: %d", facultyCount)
		return
	}

	facultiesData := []struct {
		Name        string
		Departments []string
	}{
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÇ‡∏ó‡∏£‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
				"‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏≠‡∏•‡∏¥‡πÄ‡∏°‡∏≠‡∏£‡πå", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡∏≤‡∏ô", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå",
				"‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏≤‡∏£", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÇ‡∏¢‡∏ò‡∏≤", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ò‡∏£‡∏ì‡∏µ",
				"‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ñ‡∏°‡∏µ", "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ã‡∏£‡∏≤‡∏°‡∏¥‡∏Å",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏±‡∏á‡∏Ñ‡∏°",
			Departments: []string{
				"‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
			Departments: []string{
				"‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏û‡∏∑‡∏ä", "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå", "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡πÄ‡∏Ñ‡∏°‡∏µ", "‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå", "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡∏¨‡∏≤", "‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤", "‡∏à‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï",
			},
		},
		{
			Name: "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
			Departments: []string{
				"‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°", "‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
			},
		},
	}

	// ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance ‡πÅ‡∏•‡∏∞ data consistency
	err := db.Transaction(func(tx *gorm.DB) error {
		createdFaculties := 0
		createdDepartments := 0

		for _, facultyData := range facultiesData {
			// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ì‡∏∞
			faculty := Faculty{Name: facultyData.Name}
			if err := tx.Create(&faculty).Error; err != nil {
				log.Printf("‚ùå Error creating faculty '%s': %v", facultyData.Name, err)
				return err
			}
			createdFaculties++
			log.Printf("‚úÖ Created faculty: %s", facultyData.Name)

			// ‡∏™‡∏£‡πâ‡∏≤‡∏á departments ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏ì‡∏∞
			for _, deptName := range facultyData.Departments {
				dept := Department{
					Name:      deptName,
					FacultyID: &faculty.ID,
				}
				if err := tx.Create(&dept).Error; err != nil {
					log.Printf("‚ùå Error creating department '%s': %v", deptName, err)
					return err
				}
				createdDepartments++
				log.Printf("‚úÖ Created department: %s in %s", deptName, facultyData.Name)
			}
		}

		log.Printf("üéâ Faculties and Departments seeding completed! Faculties: %d, Departments: %d", 
			createdFaculties, createdDepartments)
		return nil
	})

	if err != nil {
		log.Printf("‚ùå Error seeding faculties and departments: %v", err)
	}
}

// createFacultyWithDepartments ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤
// (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô)
func createFacultyWithDepartments(db *gorm.DB, facultyName string, departmentNames []string) {
	var faculty Faculty

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
	if err := db.Where("name = ?", facultyName).First(&faculty).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			faculty = Faculty{Name: facultyName}
			if err := db.Create(&faculty).Error; err != nil {
				log.Printf("‚ùå Error creating faculty '%s': %v", facultyName, err)
				return
			}
			log.Printf("‚úÖ Created faculty: %s", facultyName)
		} else {
			log.Printf("‚ùå Database error: %v", err)
			return
		}
	}

	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÜ
	for _, deptName := range departmentNames {
		var dept Department
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
		if err := db.Where("name = ? AND faculty_id = ?", deptName, faculty.ID).First(&dept).Error; err != nil {
			if errors.Is(err, gorm.ErrRecordNotFound) {
				dept = Department{Name: deptName, FacultyID: &faculty.ID}
				if err := db.Create(&dept).Error; err != nil {
					log.Printf("‚ùå Error creating department '%s': %v", deptName, err)
				} else {
					log.Printf("‚úÖ Created department: %s in %s", deptName, facultyName)
				}
			}
		}
	}
}
