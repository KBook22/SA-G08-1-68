package config

import (
	"log"
	"time"

	"golang.org/x/crypto/bcrypt"

	"github.com/KBook22/System-Analysis-and-Design/entity"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var db *gorm.DB

func DB() *gorm.DB {
	return db
}

func ConnectionDB() {
	database, err := gorm.Open(sqlite.Open("sa-project.db"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	db = database

	// ‚úÖ AutoMigrate ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	err = db.AutoMigrate(
		// --- ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å ---
		&entity.User{},
		&entity.Admin{},
		&entity.Student{},
		&entity.Employer{},
		&entity.Genders{},
		&entity.Banks{},
		&entity.Skill{},

		// --- ‡∏£‡∏∞‡∏ö‡∏ö Job / Payment ‡πÄ‡∏î‡∏¥‡∏° ---
		&entity.Jobpost{},
		&entity.Reviews{},
		&entity.Ratingscores{},
		&entity.Payments{},
		&entity.PaymentMethods{},
		&entity.BillableItems{},
		&entity.PaymentReports{},
		&entity.Statuses{},
		&entity.Discounts{},
		&entity.Orders{},
		&entity.AddonServices{},

		// --- ‡∏£‡∏∞‡∏ö‡∏ö Student Post ‡πÉ‡∏´‡∏°‡πà ---
		&entity.StudentPost{},
		&entity.StudentPostAttachment{},

		// --- ‡∏£‡∏∞‡∏ö‡∏ö Q&A ---
		&entity.FAQ{},
		&entity.RequestTicket{},
		&entity.TicketReply{},

		// --- ‡∏£‡∏∞‡∏ö‡∏ö Faculty & Department ---
		&entity.Faculty{},
		&entity.Department{},
	)

	if err != nil {
		panic("Failed to migrate database!")
	}
}

func SeedDatabase() {
	// ‚úÖ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
	if db.Migrator().HasTable("student_profile_posts") {
		log.Println("üóëÔ∏è Dropping old student_profile_posts table...")
		db.Migrator().DropTable("student_profile_posts")
	}

	if db.Migrator().HasTable("student_profile_posts_backup") {
		log.Println("üóëÔ∏è Dropping backup table...")
		db.Migrator().DropTable("student_profile_posts_backup")
	}

	// Genders
	genders := []entity.Genders{
		{Model: gorm.Model{ID: 1}, Gender: "‡∏ä‡∏≤‡∏¢"},
		{Model: gorm.Model{ID: 2}, Gender: "‡∏´‡∏ç‡∏¥‡∏á"},
		{Model: gorm.Model{ID: 3}, Gender: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"},
	}

	for _, g := range genders {
		db.FirstOrCreate(&g, g.ID)
	}

	// Rating Scores
	ratingScores := []entity.Ratingscores{
		{Model: gorm.Model{ID: 1}, Ratingscorename: "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"},
		{Model: gorm.Model{ID: 2}, Ratingscorename: "‡πÅ‡∏¢‡πà"},
		{Model: gorm.Model{ID: 3}, Ratingscorename: "‡∏û‡∏≠‡πÉ‡∏ä‡πâ"},
		{Model: gorm.Model{ID: 4}, Ratingscorename: "‡∏î‡∏µ"},
		{Model: gorm.Model{ID: 5}, Ratingscorename: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"},
	}

	for _, rs := range ratingScores {
		db.FirstOrCreate(&rs, rs.ID)
	}

	// Payment Method
	paymentMethod := entity.PaymentMethods{
		Model:      gorm.Model{ID: 1},
		Methodname: "‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå",
	}
	db.FirstOrCreate(&paymentMethod, paymentMethod.ID)

	// Banks
	banks := []entity.Banks{
		{Model: gorm.Model{ID: 1}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"},
		{Model: gorm.Model{ID: 2}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô"},
		{Model: gorm.Model{ID: 3}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢"},
		{Model: gorm.Model{ID: 4}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢"},
		{Model: gorm.Model{ID: 5}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï"},
		{Model: gorm.Model{ID: 6}, Bankname: "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå"},
	}

	for _, b := range banks {
		db.FirstOrCreate(&b, b.ID)
	}

	// Payment Statuses
	paymentStatuses := []entity.Statuses{
		{Model: gorm.Model{ID: 1}, StatusName: "‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞"},
		{Model: gorm.Model{ID: 2}, StatusName: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"},
		{Model: gorm.Model{ID: 3}, StatusName: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"},
		{Model: gorm.Model{ID: 4}, StatusName: "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"},
	}

	for _, ps := range paymentStatuses {
		db.FirstOrCreate(&ps, ps.ID)
	}

	// Billable Items
	billableItems := []entity.BillableItems{
		{Model: gorm.Model{ID: 1}, Description: "‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÑ‡∏ó‡∏°‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ö‡∏π", Amount: 250},
		{Model: gorm.Model{ID: 2}, Description: "‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", Amount: 50},
	}

	for _, bi := range billableItems {
		db.FirstOrCreate(&bi, bi.ID)
	}

	// ‚úÖ Skills - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
	skills := []entity.Skill{
		// ‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏¢
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ä‡∏á‡∏Å‡∏≤‡πÅ‡∏ü"},
		{SkillName: "‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô‡∏ä‡∏±‡πâ‡∏ô"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"},
		// ‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
		{SkillName: "Microsoft Office"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏£‡πá‡∏ß"},
		{SkillName: "Excel ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"},
		{SkillName: "PowerPoint"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"},
		// ‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•
		{SkillName: "Facebook Marketing"},
		{SkillName: "Instagram Marketing"},
		{SkillName: "TikTok Marketing"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ Canva"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Content"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Social Media"},
		// ‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
		{SkillName: "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"},
		{SkillName: "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠"},
		{SkillName: "‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏µ‡∏ô"},
		{SkillName: "‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"},
		// ‡∏á‡∏≤‡∏ô‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏ß
		{SkillName: "‡∏™‡∏≠‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï"},
		{SkillName: "‡∏™‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"},
		{SkillName: "‡∏™‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"},
		{SkillName: "‡∏™‡∏≠‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"},
		{SkillName: "‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"},
		{SkillName: "‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏î‡πá‡∏Å"},
		// ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
		{SkillName: "HTML/CSS"},
		{SkillName: "JavaScript"},
		{SkillName: "Python"},
		{SkillName: "PHP"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å"},
		{SkillName: "Photoshop"},
		{SkillName: "Illustrator"},
		// ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤"},
		{SkillName: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"},
		{SkillName: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤"},
		{SkillName: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå"},
	}

	for _, skill := range skills {
		var existingSkill entity.Skill
		result := db.Where("skill_name = ?", skill.SkillName).First(&existingSkill)
		if result.Error != nil {
			if result.Error == gorm.ErrRecordNotFound {
				db.Create(&skill)
				log.Printf("‚úÖ Created skill: %s", skill.SkillName)
			}
		}
	}

	// Users + Employer + Student (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
	passwordEmp, _ := bcrypt.GenerateFromPassword([]byte("123456"), 14)
	passwordStd, _ := bcrypt.GenerateFromPassword([]byte("777777"), 14)
	passwordAdmin, _ := bcrypt.GenerateFromPassword([]byte("admin123"), 14)

	users := []entity.User{
		{Model: gorm.Model{ID: 1}, Username: "hormok_hr", Password: string(passwordEmp), Role: "Employer"},
		{Model: gorm.Model{ID: 2}, Username: "panida_t", Password: string(passwordStd), Role: "Student"},
		{Model: gorm.Model{ID: 3}, Username: "admin", Password: string(passwordAdmin), Role: "admin"},
	}

	for _, u := range users {
		db.FirstOrCreate(&u, u.ID)
	}

	// Employer
	birthdayEmp, _ := time.Parse("2006-01-02", "1990-05-15")
	employer := entity.Employer{
		Model:       gorm.Model{ID: 1},
		Firstname:   "‡∏û‡∏£‡∏®‡∏¥‡∏£‡∏¥",
		Lasttname:   "‡∏ñ‡∏≤‡∏ö‡∏∏‡∏ç‡∏®‡∏£‡∏µ",
		Email:       "hr@hormok.co.th",
		CompanyName: "‡∏´‡πà‡∏≠‡∏´‡∏°‡∏Å ‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠",
		ContactPerson: "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡∏®‡∏¥‡∏£‡∏¥ ‡∏ñ‡∏≤‡∏ö‡∏∏‡∏ç‡∏®‡∏£‡∏µ",
		Birthday:    birthdayEmp,
		Phone:       "081-234-5678",
		Address:     "123 ‡∏°‡∏ó‡∏™. ‡∏õ‡∏£‡∏∞‡∏ï‡∏π 4 ‡∏ï.‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏µ ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
		UserID:      users[0].ID,
		GenderID:    genders[0].ID,
	}
	db.FirstOrCreate(&employer, employer.ID)

	// Student
	birthdayStd, _ := time.Parse("2006-01-02", "2004-12-31")
	student := entity.Student{
		Model:      gorm.Model{ID: 1},
		Email:      "panida.t@gmail.com",
		FirstName:  "‡∏û‡∏ô‡∏¥‡∏î‡∏≤",
		LastName:   "‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
		Birthday:   birthdayStd,
		Age:        20,
		GPA:        3.5,
		Year:       3,
		Faculty:    "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
		Department: "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
		Phone:      "081-234-2154",
		Skills:     "‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÑ‡∏ó‡∏°‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡∏ö‡∏π, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
		UserID:     users[1].ID,
		GenderID:   genders[1].ID,
		BankAccount: "8630211849",
		BankID:     banks[3].ID,
	}
	db.FirstOrCreate(&student, student.ID)

	log.Println("‚úÖ Database seeded successfully!")
}
