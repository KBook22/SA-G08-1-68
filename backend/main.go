// backend/main.go
package main

import (
	"github.com/KBook22/System-Analysis-and-Design/config"
	"github.com/KBook22/System-Analysis-and-Design/controllers"
	"github.com/gin-gonic/gin"
	"net/http"
)

func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, DELETE")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}

func main() {
	r := gin.Default()
	r.Use(CORSMiddleware())
	config.ConnectDB()

	api := r.Group("/api")
	{
		// Authentication
		api.POST("/register/student", controllers.RegisterStudent)
		api.POST("/login", controllers.Login)

		// --- Routes ‡πÄ‡∏î‡∏¥‡∏° (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Q&A) ---
		api.GET("/posts", controllers.GetPosts)
		api.POST("/posts", controllers.CreatePost)
		api.POST("/posts/:postId/comments", controllers.CreateComment)
		api.POST("/student-profile-posts", controllers.CreateStudentProfilePost)
		api.GET("/student-profile-posts", controllers.GetStudentProfilePosts)
		
		// --- vvvv ‡∏•‡∏ö Routes ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á Q&A ‡∏≠‡∏≠‡∏Å vvvv ---
		// api.GET("/questions", controllers.GetQuestions)
		// api.POST("/questions", controllers.CreateQuestion)
		// api.POST("/requests", controllers.CreateFormQuestion)
		// api.GET("/requests", controllers.GetFormQuestions) 
		// api.GET("/users/:userId/requests", controllers.GetFormQuestionsByUser)
		// --- ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö ^^^^ ---

		// --- vvvv ‡πÄ‡∏û‡∏¥‡πà‡∏° Routes ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Q&A vvvv ---
		// FAQ Routes
		api.GET("/faqs", controllers.GetFAQs)
		api.POST("/faqs", controllers.CreateFAQ)
		// (‡πÄ‡∏û‡∏¥‡πà‡∏° PUT, DELETE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FAQ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)

		// Request Ticket Routes
		api.GET("/tickets", controllers.GetRequestTickets)
		api.POST("/tickets", controllers.CreateRequestTicket)
		api.GET("/tickets/:id", controllers.GetRequestTicketByID) // <-- üëá ‡πÄ‡∏û‡∏¥‡πà‡∏° Route ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ üëá
		api.POST("/tickets/:id/replies", controllers.CreateTicketReply)
		// --- Add new route for status update ---
		api.PUT("/tickets/:id/status", controllers.UpdateTicketStatus)
		// --- ^^^^ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ^^^^ ---
	}

	r.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "Backend server is running!"})
	})

	r.Run()
}