package controller

import (
	"fmt"
	"net/http"

	"github.com/KBook22/System-Analysis-and-Design/config"
	"github.com/KBook22/System-Analysis-and-Design/entity"
	"github.com/gin-gonic/gin"
)

// POST /jobposts
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
// func CreateJobPost(c *gin.Context) {
// 	var jobpost entity.Jobpost
// 	if err := c.ShouldBindJSON(&jobpost); err != nil {
// 		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
// 		return
// 	}

// 	if err := config.DB().Create(&jobpost).Error; err != nil {
// 		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
// 		return
// 	}
// 	c.JSON(http.StatusCreated, gin.H{"data": jobpost})
// }
// POST /jobposts
func CreateJobPost(c *gin.Context) {
    // ‚úÖ ‡∏î‡∏∂‡∏á employerID ‡∏à‡∏≤‡∏Å context ‡∏ó‡∏µ‡πà middleware set ‡πÑ‡∏ß‡πâ
    employerID, ok := c.Get("employerID")
    if !ok {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
        return
    }

    var jobpost entity.Jobpost
    if err := c.ShouldBindJSON(&jobpost); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ employerID ‡∏à‡∏≤‡∏Å JWT
    jobpost.EmployerID = employerID.(uint)

    if err := config.DB().Create(&jobpost).Error; err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    c.JSON(http.StatusCreated, gin.H{"data": jobpost})
}


// GET /jobposts/:id
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
func GetJobPostByID(c *gin.Context) {
	var jobpost entity.Jobpost
	id := c.Param("id")
	if err := config.DB().Preload("Employer").First(&jobpost, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Job post not found"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": jobpost})
}

// GET /jobposts
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func ListJobPosts(c *gin.Context) {
	var jobposts []entity.Jobpost
	// if err := config.DB().Preload("Employer").Find(&jobposts).Error; err != nil {
	// 	c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	// 	return
	// }
	if err := config.DB().
    Preload("Employer").
	Preload("Employer.User").
    Preload("JobCategory").
    Preload("EmploymentType").
    Preload("SalaryType").
    Find(&jobposts).Error; err != nil {
    c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
    return
}

	c.JSON(http.StatusOK, gin.H{"data": jobposts})
}

// PUT /jobposts/:id
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô
func UpdateJobPost(c *gin.Context) {
	var jobpost entity.Jobpost
	id := c.Param("id")

	if err := config.DB().First(&jobpost, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Job post not found"})
		return
	}

	if err := c.ShouldBindJSON(&jobpost); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := config.DB().Save(&jobpost).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"data": jobpost})
}

// DELETE /jobposts/:id
// ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô
func DeleteJobPost(c *gin.Context) {
    id := c.Param("id")

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    var jobpost entity.Jobpost
    if err := config.DB().First(&jobpost, id).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ"})
        return
    }

    // ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå
    if err := config.DB().Delete(&jobpost).Error; err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
        return
    }

    c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"})
}


// GET /api/employer/myposts
func GetEmployerPosts(c *gin.Context) {
    // userID, exists := c.Get("userID")
	// employerID, exists := c.Get("employerID")
    // if !exists {
    //     c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
    //     return
    // }

    // var employer entity.Employer
    // if err := config.DB().Where("user_id = ?", userID).Preload("User").First(&employer).Error; err != nil {
    //     c.JSON(http.StatusNotFound, gin.H{"error": "Employer not found"})
    //     return
    // }

    // var jobposts []entity.Jobpost
    // if err := config.DB().
    //     Preload("Employer.User").
    //     Where("employer_id = ?", employerID).
    //     Find(&jobposts).Error; err != nil {
    //     c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
    //     return
    // }

	// fmt.Println("üîπ userID:", userID)
	// fmt.Println("üîπ employer.ID:", employer.ID)
	// fmt.Println("üîπ employer.user_id:", employer.UserID)
	// fmt.Println("üîπ count jobposts:", len(jobposts))

    // c.JSON(http.StatusOK, gin.H{"data": jobposts})
	// GET /api/employer/myposts

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ employerID ‡∏à‡∏≤‡∏Å context ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    employerID, ok := c.Get("employerID")
    if !ok {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
        return
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á jobposts ‡∏ï‡∏≤‡∏° employerID ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
    var jobposts []entity.Jobpost
    if err := config.DB().
        Preload("Employer.User").
        Where("employer_id = ?", employerID).
        Find(&jobposts).Error; err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    fmt.Println("üîπ employerID:", employerID)
    fmt.Println("üîπ count jobposts:", len(jobposts))

    c.JSON(http.StatusOK, gin.H{"data": jobposts})

}

// POST /jobposts/upload-portfolio/:id
// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Portfolio ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Jobpost
func UploadPortfolio(c *gin.Context) {
    id := c.Param("id") // ‡∏£‡∏±‡∏ö id ‡∏Ç‡∏≠‡∏á jobpost ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï

    file, err := c.FormFile("portfolio")
    if err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå"})
        return
    }

    filename := file.Filename
    savePath := "./uploads/" + filename

    if err := c.SaveUploadedFile(file, savePath); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ"})
        return
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô DB
    var jobpost entity.Jobpost
    if err := config.DB().First(&jobpost, id).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "Job post not found"})
        return
    }

    jobpost.PortfolioRequired = &savePath
    if err := config.DB().Save(&jobpost).Error; err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï jobpost ‡πÑ‡∏î‡πâ"})
        return
    }

    c.JSON(http.StatusOK, gin.H{
        "message":  "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "filePath": savePath,
        "data":     jobpost,
    })
}


